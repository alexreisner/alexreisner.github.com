---
title: "Sending Email From Your Web Site"
layout: article
categories: articles
---
If you've ever run a web site which sends emails to its users you may have found yourself on the opposite end of the spam problem. That is, other servers think your emails are spam and refuse to accept them. If you're sending customer invoices, order confirmations, or product download instructions, this is a serious problem. You may be tempted to use an external service for sending emails, and this may be a good solution in your case, but I would argue that any well-configured web server should be able to successfully send emails. What about the output of cron jobs? Or developer notifications when errors occur? Web servers need to send email, so how to we make it work?

There is a lot of advice out there on how to make sure messages are delivered properly, but some of it is specific to particular email providers and among the general advice, some points are more significant than others. Here are some tips, in roughly descending order of importance, based on my experience.


h2. 1. Avoid Sending Spam

This may sound either obvious or irrelevant, but it's really important to be familiar with the ways you could be sending spam without even knowing it.

h3. Don't Send Email To People Who Don't Want It

Much spam filtering these days is done by techniques such as Bayesian classification which rely on users reporting received messages as spam or not-spam. If you don't want your messages marked as spam, you should avoid sending them to people who might do so. You should also provide clear instructions for un-subscribing from your mailing list (and have an _actual working un-subscribe procedure_).

h3. Configure Your MTA Properly

Before you install an MTA (Message Transfer Agent, eg: Sendmail, Postfix), make sure you're familiar with basic configuration of the software, and the implications of running an MTA. *Running an MTA is not like running a web server. You can cause real problems for yourself and others (see below).* Be sure to read _more than one_ tutorial on setting up your particular MTA, and don't forget "obvious" things like setting the proper hostname/mailname so your messages come from the correct domain.

h4. Don't Be an Open Relay

An open relay is an MTA which can be used by anyone to send mail to any address. Unfortunately this is the default configuration for some MTAs. If you are an open relay it's just a matter of time until a spammer finds you and uses your server to send thousands of emails, blacklisting you in the process. Repeat: you will certainly be blacklisted.

h4. Avoid Backscatter

Backscatter are bounced emails, usually that were never intended to be successfully delivered. For example, suppose a spammer wants to send an email to victim@poorsaps.com. If they send an email to a non-existent user on your system that appears to be _from_ victim@poorsaps.com (forged sender address), your server will "return" that message to the victim.

h4. Easy Solution

If your server's main function is to be a web server, and it doesn't host any accounts that need to receive or send email, I recommend simply rejecting non-local connections on port 25 (SMTP). I do this in Postfix with this line at the top of @/etc/postfix/master.cf@:

{% highlight :bash %}
127.0.0.1:smtp   inet   n   -   n   -   -   smtpd
{% endhighlight %}

This ensures that you're not even wasting CPU cycles dealing with malicious connections.

* always send from same address (https://mail.google.com/support/bin/answer.py?answer=81126)


h2. 2. Remove Your Server From Spamhaus's Blocklists

Start by "checking if you're on Spamhaus's blocklists":http://www.spamhaus.org/lookup.lasso. Chances are your server's IP address is on the Policy Block List (PBL). If so, *don't get mad at Spamhaus*. The PBL is a *block* list, not a *black*list, and Spamhaus isn't telling everyone that you're a spammer. Because most computers connected to the Internet don't send email, all IP addresses are on the PBL by default. If you want to send email you simply get your IP address de-listed (it doesn't take long). This is a good thing. The only unfortunate part is that most people don't know about this.

If your IP address is on the SBL or XBL you may have a problem. Before doing anything else, go back to step #1 and make sure you're not sending spam. If you're absolutely certain that your server is not sending spam you can try to get yourself removed from Spamhaus's list, or contact your hosting provider for a new IP address (you may have inherited a previous customer's problem).


h2. 3. Configure Reverse DNS Lookups

Not configuring reverse DNS is nearly equivalent in effect to being listed in Spamhaus's PBL: many servers simply will not accept your messages. Look for reverse DNS configuration in your hosting provier's control panel. To configure, just map your server's IP address to your site's domain name. Simple, yet powerful.


h2. Format Messages Properly

* format messages properly (headers, body) as per RFC 2821 and 2822
* use W3C standards for HTML email


h2. 4. Create SPF Records

This is an important step for delivering messages to Gmail accounts. An SPF record is a "TXT" record in your domain's DNS configuration which names the servers that are authorized to send mail from your domain. For example, to authorize only the servers named in your A and MX records, create a TXT record with this content:

{% highlight :bash %}
v=spf1 a mx ~all
{% endhighlight %}

If you need a different configuration you can use "OpenSPF's wizard":http://old.openspf.org/wizard.html to generate the record for you. I was able to confirm that my SPF record was working by noting the following header in an email sent from my server:

{% highlight :bash %}
Received-SPF: pass (google.com: domain of admin@domain.com designates
  xxx.xxx.xxx.xxx as permitted sender) client-ip=xxx.xxx.xxx.xxx;
{% endhighlight %}

I use Google Apps for email, and I imagine that if you use a different service which doesn't care about SPF records, you will see no such confirmation. If anyone knows of a general method for checking SPF configuration could you please explain it in a comment?


h2. Sign Email With DomainKeys or DKIM

(Good for delivering messages to Yahoo accounts.)
domain keys w/ postfix:
* http://www.howtoforge.com/postfix_dkfilter_domain_keys_implementation
* http://anothersysadmin.wordpress.com/2008/01/16/domainkeysdkim-with-postfix/



h2. Use the 'Precedence: bulk' Header for Bulk Emails?

This one is a little confusing. "Google recommends using the Precedence header":https://mail.google.com/support/bin/answer.py?answer=81126 while "RFC 2076":http://www.faqs.org/rfcs/rfc2076.html recommends _against_ it. Ostensibly setting @Precedence: bulk@ lets target servers know that your email is not urgent and therefore helps the Internet operate more smoothly. You might think that this would identify your email as spam, but think about it: would a spammer really mark their messages as bulk email?

Use or not, as you see fit.




* http://senderbase.org/senderbase_queries/detailip?search_string=174.143.206.168

* https://mail.google.com/support/bin/answer.py?answer=81126
* http://help.yahoo.com/l/us/yahoo/mail/postmaster/index.html
* http://help.yahoo.com/l/us/yahoo/mail/postmaster/errors/postmaster-26.html
* http://worldnet.att.net/general-info/block_inquiry.html

AOL Technical Standards for E-mail Delivery:
http://postmaster.aol.com/guidelines/standards.html

ServerFault question:
http://serverfault.com/questions/115161/fixing-my-mtas-poor-reputation/115240

SMTP hosts:
http://www.authsmtp.com/
http://www.jangosmtp.com/

SMTP host requirements:
  * access to SMTP log
  * DomainKeys/DKIM
  * correct reverse DNS lookups


* Good questions about using Google Apps for SMTP with Rails:
http://www.ruby-forum.com/topic/166338

