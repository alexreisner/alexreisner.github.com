---
title: "How To Keep Your Daemons Alive"
layout: article
categories: articles
---
As web programmers we're all comfortable with daemon processes like web and database servers. These processes (e.g., Apache and MySQL), have robust and proven methods of keeping themselves alive. Even if they crash they seem to come back to life on their own.

h2. What Can Go Wrong?

In a live web application? Lots of things:

# Your hosting provider needs to restart your machine due to maintenance or malfunction.


h2. Am I An Atheist?

Above I mentioned above, your server (especially if it is virtual) may occasionally be restarted by another person or a process outside of your control. In my experience, this is actually quite common, and my guess is that if you're reading this article it's happened to you at least once: you have an email one morning, usually when you're on vacation, that your machine was "unresponsive" and needed to be rebooted. You then realize that while your web server was restarted, your Mongrels weren't, and your site has been down for the past 10 hours.

"God":http://... is a highly configurable process monitoring solution written in Ruby, configured by Ruby, and used on high volume sites like "GitHub":http://www.github.com/. As a Ruby programmer, why do I ignore God? While I can't comment from experience on whether God deserves its somewhat "negative reputation":http://www.stackoverflow.com/..., it fails my most basic criteria for a process monitor: it doesn't automatically and reliably start on system boot-up.

Sure I can "use rc.d":http://... to launch it, but this involves some commands I can never remember, is a pain to test, and so is a process I'm less than comfortable with. I'd much rather my process monitor be "built-into" my operating system, or at least be as close as possible to this ideal. If I have to worry about the status of my process monitor, it's not serving its purpose.

Monit is installable through Ubuntu's package management system and starts on boot-up by default, just like Apache and MySQL. I don't have to think about it. I'm willing to sacrifice a slick Ruby config file and some advanced monitoring options for this simplicity and peace of mind.


