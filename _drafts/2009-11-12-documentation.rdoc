Practical Documentation

http://jacobian.org/writing/great-documentation/

Jacob Kaplan-Moss is right about many things, but I have a couple of issues with it:


# Write only as much documentation as can be maintained. You may need to adjust your workflow to integrate documentation maintenance more closely with code maintenance.


* It's fine for open source documentation where one, in theory, has endless time to write documentation, but what about paid projects?

* The idea that more documentation is better fails when there is too much documentation to maintain and it goes out of date. Inaccurate documentation is almost as bad as no documentation.

* 


Kaplan-Moss apologizes a couple of times in his article for weaknesses in Django's documentation. It's great when anyone publicly criticizes their own work, but does this point to a problem? Too much documentation? He says "700 pages printed" as if that's a good thing.

The idea that we can make everyone happy is nice. However, the rule that "a well-documented project needs to provide many different forms of documentation" is a little unrealistic, and not just because it runs the risk of violating Rule #1 above. Nearly all good design is opinionated (it's not just my Rails indoctrination that makes me say this). We shouldn't need to call things "opinionated", it should be the norm, and un-opinionated designs should be called "unfocused." It's the same way with documentation. This is certainly not to say that everyone learns in the same way (we obviously don't) but that it's far easier to read 20 pages from start to finish, even if it's a little complicated, than try to find what you're looking for in a 200 page tome. If you're already familiar with a product and its documentation then you know what headings to look under or what to search for. If you don't yet know the terminology, you need something small.


It's the difference between Apple and Microsoft [careful: MS has 80% of market]. I don't think this is a new idea in any way


" auto-generated documentation is worse than useless: it lets maintainers fool themselves into thinking they have documentation, thus putting off actually writing good reference by hand" -- I agree






A Standard For Code Documentation

While the idea may at first seem silly, oversimplified, and too general, I'd like to propose a standard format for documentation of open source code.


h2. Motivation

While it's true that everyone learns differently, I think a carefully-planned layout will accommodate a high percentage of people. In most types of product design it's best to imagine a single user (real or hypothetical) and design exactly what they would want. Trying to include something for everyone is a great way to satisfy no one, and it leads to too much documentation, which is impractical for the maintainer and overwhelming to the reader.

Also, a standard format saves us from having to design the documentation for every project we create. It should be much faster to write when you're just filling in the blanks and not worrying about the structure. Hopefully this will make the task of writing documentation easier and more people will do it.

It may also make documentation easier to read because people will already have a basic familiarity with your documentation structure. Anyway, without further delay, here is a first draft of my proposed standard. I seek your feedback.


h2. The Standard

Documentation should appear in five sections. All sections do not need to appear on the same page. It is often most practical for them to appear on different sites, but each section should contain links to every other section to give context and access.

Note that I describe these sections as if you are the reader, not the writer. It's hard to make yourself unfamiliar with your own project so it's good to think about experiences you've had learning how to use other people's projects.

At this stage I am not proposing names for the sections.


h3. I. What it is and why you might want to use it

This is important, and often overlooked. Frequently we look up a piece of software because we heard the name, it sounded exciting, and we want to know if we have a use for it. We may not know:

* what problems it solves
* how it does it (environment, dependencies)
* its shortcomings
* how it compares to alternatives

All this information is extremely useful, and it is perhaps the most difficult section for the software author to write. As programmers we know intimately what our code does, and this familiarity makes it hard for us to understand what it's like for someone not to know. For this reason it's good to write this section of the documentation early in the development of your project, ideally even before it's started. Of course you'll tweak it as you go along and add features or change the focus, but it's important to lay the groundwork and set the tone while you're a sort of newcomer to your project. Once you know something, it's hard to forget it.


h3. II. How to download/purchase, install, and configure it

Strangely, this section is also often overlooked. In the case of free open source software, a download will often be available right near (or even within) the documentation, but there's no telling where your documentation will appear in the future (you might need to move a section somewhere else), and it's best to pretend that you are writing a good old-fashioned book. Tell your readers:

* how to obtain your software (download URL)
* how to install it (on any platform where it runs)
* what the most common, basic configuration options are (if any)
* a method for confirming that the software is installed successfully
* common problems encountered with installation


h3. III. How to get started with it (a tutorial)

Once a piece of software is installed, you want to get started using it by doing something simple to get a feel for the style and operational paradygm of the interface. It may not be what you ultimately want to do with the software, but if you have a working example within 5 or 10 minutes you're usually feeling pretty confident. Make this happen for your readers.


h3. IV. How to do more advanced things with it (JKM's "Topical Guides")

The above three sections will often be located in the code's README file. This is the first section which will probably be located elsewhere, as it may grow to be fairly long and is not intended to be read linearly.


h3. V. API documentation (auto-generated)

Finally, good API documentation is important for large projects. If you are writing a Rails plugin that provides two methods you may not need API documentation at all, but your code should always be well-commented...


What about the ever-changing nature of APIs? Does this not suggest that comments and discussions are a better way than a big book? Once someone's read a book they're unlikely to go back and read it again to see what's new. That's just a waste of time. We either need some way of quickly showing what's new, or short, dated snippets, like comments and discussion posts.

