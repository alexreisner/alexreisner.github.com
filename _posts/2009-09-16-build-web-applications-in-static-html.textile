---
title: Build Web Applications In Static HTML
layout: post
categories: articles
---
If you enjoy writing small web applications in web microframeworks like Sinatra or web.py, consider this: no matter how quick and easy it is to write and deploy, your app will never be as quick and easy as no app at all.

Every feature you implement means more code to maintain, and frequently you use the same feature for many web sites resulting in tons of duplicated code. You might package a feature as a plugin or gem for easy propagation to all of your sites, but upgrades may still require adjustments to database structure or application code.

What I'm getting at is this: what if you could forget about writing web applications entirely and just deploy some static HTML files, like in 1995 before you learned Perl?

This web site you are reading now is deployed as a collection of static HTML files (thanks to "Jekyll":http://github.com/mojombo/jekyll), but you can read and write comments because I'm using a service called "Disqus":http://disqus.com/ to provide them via JavaScript. I've added an application-like feature to a site without writing a single line of server-side code. I can deploy by uploading some files and telling Apache where they are. Sound appealing? It does to me.


h2. Beyond Comments

Programmers have been using services like "Pastie":http://pastie.org and "Gist":http://gist.github.com to add syntax highlighting to their sites which, like this one, could be implemented with static HTML. There are also services which offer entire customer feedback and discussion systems like "Uservoice":http://uservoice.com.

<!-- Slide shows can be displayed, as demonstrated by "Flickrshow":http://www.flickrshow.com, and "AddThis":http://www.addthis.com will allow users to quickly "share" your site via Digg, Delicious, FaceSpace, and TwitUpon. -->

These are third-party solutions, so the providers own your data. What I'd like to see, and what I suspect we will start to see soon, is open source versions of this type of service which would give us back our data, as well as control of the interface.

[
* ActiveResource
* need to design architecture carefully
  * Interface-Oriented Design book
]

I'm somewhat optimistic about Apache's "CouchDB":http://couchdb.apache.org as an engine for these services. Its native interface is HTTP, its query language is JavaScript, and it can serve HTML so it integrates easily with existing tools and techniques. It's currently at version 0.9.1 and probably not stable enough for serious production use, but I believe it will be soon.


h2. The Big Caveat

Sorry to say, there is a major problem with all of this, which is the limiting factor in how far we can practically take this idea of static HTML web applications: Google. 





Multi-part article?:

* JS services
  * comments (Disqus)
  * syntax highlighting (Gist, Pastie)
  * discussion (whatever Railscasts uses)?
  * analytics (Google)
  * CouchDB (once auth model is implemented)
  * guest book (JibberBook)
  
* app services
  * avatars (Gravatar)
  * photos (Flickr)
  * authentication (OpenID)
  * email delivery

* custom app services 
  * DRb services (included in app services? for writing your own)
    * Mack (discontiued: http://www.metabates.com/2009/03/04/thank-you/)
    * watch RubyConf video on distributed apps
    * Mark Bates' book
  * memcached
  * ActiveResource



Benefits:

* easier to set up each app server
* can set up server optimized for each feature
* separation of concerns
* less code in each app
* Google Chrome will improve JS performance


To-do:

* new title
  * Distributed Web Applications
* am I using AOP terms correctly? (esp 3rd, 4th paras)

