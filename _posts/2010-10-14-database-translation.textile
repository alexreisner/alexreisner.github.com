---
title: "Database Translation Guide"
layout: article
categories: articles
---
Web frameworks that come with database abstraction layers like ActiveRecord have given us a degree of freedom in the database software we use. Database portability increases the number of platforms on which we can deploy our apps, but you still need to know how to use the different databases. For those of you who are used to MySQL or PostgreSQL and need to learn SQLite (or some other combination of those), here are some rough command equivalents in each to get you started.

h2. Basic Administration

Some of these commands are given at your operating system command prompt and others are given at the database client command prompt. I have indicated the prompt in each command below: @$@ is your OS, and @db>@ is your database client.

h3. Start the Database Client

"*SQLite*":http://www.sqlite.org

{% highlight :bash %}
$ sqlite <db file>
{% endhighlight %}

"*MySQL*":http://www.mysql.com

{% highlight :bash %}
$ mysql -u<user> -p <db name>
{% endhighlight %}

"*PostgreSQL*":http://www.postgresql.org

{% highlight :bash %}
$ psql -U <user> <db name>
{% endhighlight %}


h3. List Available Databases

"*SQLite*":http://www.sqlite.org

Databases are stored in separate files, usually with a @.sqlite3@ or @.db@ extension. SQLite cannot find these files for you.

"*MySQL*":http://www.mysql.com

{% highlight :bash %}
db> SHOW DATABASES;
{% endhighlight %}

"*PostgreSQL*":http://www.postgresql.org

{% highlight :bash %}
db> SELECT datname FROM pg_database;
{% endhighlight %}


h3. Create a Database

"*SQLite*":http://www.sqlite.org

{% highlight :bash %}
$ sqlite3 <db file>
{% endhighlight %}

"*MySQL*":http://www.mysql.com

{% highlight :bash %}
$ mysqladmin -u<user> -p create <db name>
{% endhighlight %}

"*PostgreSQL*":http://www.postgresql.org

{% highlight :bash %}
$ createdb <db name>
{% endhighlight %}


h3. Change the Current Database

"*SQLite*":http://www.sqlite.org

Close the client and re-open with another file.

"*MySQL*":http://www.mysql.com

{% highlight :bash %}
db> USE <db name>
{% endhighlight %}

"*PostgreSQL*":http://www.postgresql.org

{% highlight :bash %}
db> \connect <db name>
{% endhighlight %}


h3. List Tables in a Database

"*SQLite*":http://www.sqlite.org

{% highlight :bash %}
db> .schema
{% endhighlight %}

"*MySQL*":http://www.mysql.com

{% highlight :bash %}
db> SHOW tables;
{% endhighlight %}

"*PostgreSQL*":http://www.postgresql.org

{% highlight :bash %}
db> \dt
{% endhighlight %}


h3. Display Schema for a Table

"*SQLite*":http://www.sqlite.org

{% highlight :bash %}
db> .schema <table>
{% endhighlight %}

"*MySQL*":http://www.mysql.com

{% highlight :bash %}
db> DESCRIBE <table>;
{% endhighlight %}

"*PostgreSQL*":http://www.postgresql.org

{% highlight :bash %}
db> \d <table>
{% endhighlight %}


h2. Functions

Where there is more than one way to accomplish the same thing I have chosen the most generally-usable functions since that is normally what you'll want to use for cross-database compatibility. There are some common things which SQLite cannot do out of the box, but a lot of useful functions can be added with the "extension-functions":http://www.sqlite.org/contrib/download/extension-functions.c?get=25. Compilation instructions are in the downloaded file. Load the extension at the SQLite prompt:

{% highlight :bash %}
.load <compiled extension filename>
{% endhighlight %}


h3. Select a Substring

"*SQLite*":http://www.sqlite.org, "*MySQL*":http://www.mysql.com, and "*PostgreSQL*":http://www.postgresql.org

{% highlight :bash %}
SUBSTR(<string>, <start>, <length>) # length argument is optional
{% endhighlight %}


h3. Find the Position of a Substring

"*SQLite*":http://www.sqlite.org

{% highlight :bash %}
CHARINDEX(<sta>, <haystack>) # requires extension-functions
{% endhighlight %}

"*MySQL*":http://www.mysql.com, and "*PostgreSQL*":http://www.postgresql.org

{% highlight :bash %}
POSITION(<sta> IN <haystack>)
{% endhighlight %}


h3. Raise a Number to a Power

"*SQLite*":http://www.sqlite.org, "*MySQL*":http://www.mysql.com, and "*PostgreSQL*":http://www.postgresql.org

{% highlight :bash %}
POWER(<base>, <exponent>) # requires extension-functions in SQLite
{% endhighlight %}


h3. Get the Year From a Date

"*SQLite*":http://www.sqlite.org/lang_datefunc.html

{% highlight :bash %}
STRFTIME("%Y", <date>)
{% endhighlight %}

"*MySQL*":http://dev.mysql.com/doc/refman/5.1/en/date-and-time-functions.html#function_year

{% highlight :bash %}
YEAR(<date>)
{% endhighlight %}

"*PostgreSQL*":http://www.postgresql.org/docs/8.3/static/functions-datetime.html#FUNCTIONS-DATETIME-TABLE

{% highlight :bash %}
EXTRACT(YEAR FROM <date>)
{% endhighlight %}


h3. If/Then/Else

MySQL provides an IF() function that many people are used to:

"*MySQL*":http://dev.mysql.com/doc/refman/5.0/en/if-statement.html

{% highlight :bash %}
IF(<condition>, <then-expression>, <else-expression>)
{% endhighlight %}

This is convenient but not supported by other databases. It's better to use the more widely-implemented CASE statement:

"*SQLite*":http://www.sqlite.org/lang_expr.html#case, "*MySQL*":http://dev.mysql.com/doc/refman/5.0/en/case-statement.html, and "*PostgreSQL*":http://www.postgresql.org/docs/8.4/interactive/functions-conditional.html#AEN15210

{% highlight :bash %}
CASE WHEN <condition> THEN <expression> ELSE <expression> END
{% endhighlight %}


h3. Select an Alternative to Null

This is commonly achieved in MySQL through the use of @IFNULL(x, y)@, but the @COALESCE@ function is equivalent in the case of two arguments, more general, and more widely implemented. It takes any number of arguments and returns the first one which is not null.

"*SQLite*":http://www.sqlite.org/lang_corefunc.html#coalesce, "*MySQL*":http://dev.mysql.com/doc/refman/5.0/en/comparison-operators.html#function_coalesce, and "*PostgreSQL*":http://www.postgresql.org/docs/8.3/interactive/functions-conditional.html#AEN14491

{% highlight :bash %}
COALESCE(<value1>, <value2>, ...)
{% endhighlight %}


That's all for now, though I will probably add to this list in the future. If there is anything you would like to see added, please let me know.
