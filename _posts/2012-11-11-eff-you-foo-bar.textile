---
title: "Eff You Foo Bar"
layout: article
categories: articles
---
Consider this Ruby code:

{% highlight :ruby %}
if self.new?
  @new_bar = bar.new
  @new_bar.baz = new_current_baz_value
else
  self.bars.build(:baz => 7)
end
{% endhighlight %}

Whoever writes code like this should receive a swift foo in the baz.

In case you didn't know, variables in programming are used to represent _things_. Let's examine:

* foo - _not a thing_ (unless you know your military terminology)
* bar - a place to drink; a rod; 100,000 N/m^2
* baz - _not a thing_

Variable names are important because they illustrate the relationships between objects in code. If you're using sample code to _explain_ something to someone then variable names are equally, if not more important. Let's say you have two objects with a hierarchical relationship. Why would you write this:

{% highlight :ruby %}
class Larry
  def add_moe(name)
    @tree.add(shemp: self, name: name)
  end
end
{% endhighlight %}

when you can write this:

{% highlight :ruby %}
class Node
  def add_child(name)
    @tree.add(parent: self, name: name)
  end
end
{% endhighlight %}

With proper variable names you don't need to explain that a Larry is a thing that has one shemp and many moes. It's obvious to anyone who knows about tree-like data structures. When you use the word 'shemp' in your code you have to explain what a 'shemp' is, and if you need to explain your variable names then your variable names suck.

Not only are foo, bar, and baz completely uninformative and requiring of external explanation, they are _even worse_ than larry, moe, and shemp because "bar" and "baz" look the same!

Please, stop using foo, bar, and baz. You can do so much better.
